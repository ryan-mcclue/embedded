#!/bin/bash

set -oue pipefail

build_start_time=$(date +%s.%N)

if [[ "$1" != "app" && "$1" != "tests" ]]; then
  printf "Usage: ./build <app|tests>\n" >&2
  exit 1
fi

BUILD_TYPE="$1"

bsp_flags="
  -DUSE_HAL_DRIVER
  -DSTM32F429xx
  -IBSP/tra/Core/Inc
  -IBSP/tra/Drivers/STM32F4xx_HAL_Driver/Inc
  -IBSP/tra/Drivers/STM32F4xx_HAL_Driver/Src
  -IBSP/tra/Drivers/STM32F4xx_HAL_Driver/Inc/Legacy
  -IBSP/tra/Drivers/CMSIS/Device/ST/STM32F4xx/Include
  -IBSP/tra/Drivers/CMSIS/Include
  -TBSP/tra/STM32F429ZITx_FLASH.ld
  BSP/tra/startup_stm32f429xx.s
  BSP/tra/Core/Src/system_stm32f4xx.c
"

# -fprofile-arcs -ftest-coverage
arm-none-eabi-gcc $common_flags -DTESTING \
  code/tem.c \
  tests/qemu-arm-exit.c \
  tests/test-tem.c \
  -o build/test-tem.elf -lc -lm -lrdimon -lcmocka-static


push_dir() {
  command pushd "$@" > /dev/null
}

pop_dir() {
  command popd "$@" > /dev/null
}


if [[ "$OSTYPE" == "linux-gnu" ]]; then
  os="linux"
else
  printf "Error: Currently only support linux as build machine\n" >&2
  exit 1
fi

# NOTE(Ryan): This file is ignored by source control to allow tweaking of build params without affecting history
source "private/build-params"
param_compiler=${param_compiler:-"arm-none-eabi-gcc"}
param_mode=${param_mode:-"debug"}
param_arch=${param_arch:-"arm"}
param_verbose=${param_verbose:-"0"}

mkdir -p build run

target_compiler_flags=()
target_linker_flags=()
simulator_compiler_flags=()
simulator_linker_flags=()

if [[ "$param_arch" == "arm" && "$param_compiler" == "arm-none-eabi-gcc" && "$os" == "linux" ]]; then

  # IMPORTANT(Ryan): Unfortunately new errors aren't added to -Wall and -Wextra for backwards compatibility

  # NOTE(Ryan): Enable various warnings largely related to implicit signed, alignment, casting, promotion issues
  target_compiler_flags+=( "-Wall" "-Wextra" "-Wshadow" "-Wconversion" "-Wdouble-promotion" "-Wformat=2" "-pedantic" )
  target_compiler_flags+=( "-Wundef" "-Wshadow" "-Wpadded" "-fno-common" "-march=native" )
  target_compiler_flags+=( "-Wfloat-equal" "-Wlogical-op" "-Wredundant-decls" "-Wstrict-overflow=2" "-Warray-bounds=2" )
  target_compiler_flags+=( "-Wwrite-strings" "-Wpointer-arith" "-Wformat-truncation" "-Wmissing-include-dirs" )
  target_compiler_flags+=( "-Wcast-align" "-Wswitch-enum" "-Wsign-conversion" "-Wdisabled-optimization" )
  target_compiler_flags+=( "-Winline" "-Wmissing-declarations" "-Wdouble-promotion" "-Wshadow" "-Wtrampolines" )
  target_compiler_flags+=( "-Wvector-operation-performance" "-Wnull-dereference" "-Winvalid-pch" )
  target_compiler_flags+=( "-Wduplicated-cond" "-Wshift-overflow=2" "-Wcast-align=strict" )
  target_compiler_flags+=( "-Wstrict-null-sentinel" "-Wuseless-cast" "-Wzero-as-null-pointer-constant" )

  # NOTE(Ryan): Display the specific warning flag so we can ignore it if needed
  target_compiler_flags+=( "-fdiagnostics-show-option")

  # NOTE(Ryan): Ignored warnings
  target_compiler_flags+=( "-Wno-unknown-pragmas" "-Wno-missing-field-initializers" "-Wno-cast-align" "-Wno-useless-cast" "-Wno-comment" "-Wno-missing-declarations" )

  target_compiler_flags+=( "-mcpu=cortex-m4" "-mthumb" "-I$HOME/prog/cross/arm/include" "-L$HOME/prog/cross/arm/lib" )

  target_compiler_flags+=( "-ffunction-sections" "-fdata-sections" )

  target_compiler_flags+=( "-I code" "-isystem external" )

  target_linker_flags+=( "-lc" "-lm" "-Wl,--gc-sections" )

  simulator_compiler_flags=$target_compiler_flags
  simulator_compiler_flags+=$( "-mfloat-abi=soft" "--specs=rdimon.specs" "-lrdimon" )

  target_compiler_flags+=$( "-lnosys" "-mfloat-abi=hard" "-mfpu=fpv4-sp-d16" "--specs=nano.specs" )

# export GCOV_PREFIX="$HOME/prog/personal/tra/build"
# just add --coverage?
# lcov --capture --directory project-dir --output-file coverage.info

  # post-build get firmware size

  # use for embedded, as will take into account region names specified in a linker script
  # compiler_flags+=( "-Wl,--print-memory-usage" )
  # -Wl,-Map=build/main.map 
  # for embedded use -specs=nano.specs to get nano variant of newlib
  # newlib only includes ISO C, not any POSIX etc.
  # https://interrupt.memfault.com/blog/get-the-most-out-of-the-linker-map-file
  # -Wl,-Map=${PROJECT_NAME}.map,--cref 

  if [[ "$param_mode" == "debug" ]]; then
    target_compiler_flags+=( "-DMAIN_DEBUG" )

    # NOTE(Ryan): -g3 gives macro definitions
    target_compiler_flags+=( "-g3" "-gdwarf-2" "-O0" )

    target_compiler_flags+=( "-Wno-unused-function" "-Wno-unused-variable"  "-Wno-unused-but-set-variable" "-Wno-unused-parameter" "-Wno-unused-result" ) 

    # NOTE(Ryan): The \x part specifies any ascii character
    # rg --no-line-number --only-matching "\[\-W[\x00-\x7F]+\]" warnings.txt | sort | uniq
    
    # TODO(Ryan): Also run tests for release builds
    if [[ "$BUILD_TYPE" == "tests" ]]; then

      # TODO(Ryan): run natively
      gcc -DMAIN_TEST --coverage -lcmocka ${compiler_flags[*]} \
        code/linux-main.cpp -o build/linux-main-test ${linker_flags[*]}
      # NOTE(Ryan): gcov complains if overriding existing .gcda files
      rm -f linux-main.gcda
      # find -name '*.gcda' -exec rm {} +
      push_dir run
      ../build/linux-main-test
      pop_dir
      gcov -b -o . code/linux-main.cpp >/dev/null
      gcovr -e ".*\.h"
    # find . -name '*.gcov' -and -not -name 'linux-main.cpp.gcov' -exec rm {} +
        
    else
      arm-none-eabi-gcc ${compiler_flags[*]} code/linux-main.cpp -o build/stm32f2323-target-debug.elf ${linker_flags[*]}
      arm-none-eabi-objcopy -O binary build/tem.elf build/tem.bin
      arm-none-eabi-objcopy -O ihex build/tem.elf build/tem.hex

      # simulator
      arm-none-eabi-gcc ${compiler_flags[*]} code/linux-main.cpp -o build/stm32f2323-simulator-debug.elf ${linker_flags[*]}

      # IMPORTANT(Ryan): This does not show debug information
      # Also assuming .bss negligable due to zero intialisation paradigm
      arm-none-eabi-size build/linux-main | awk 'FNR == 2 { printf "text + data = %dkb\n", $4/1024 }'
    fi
  elif [[ "$param_mode" == "release" ]]; then
    target_compiler_flags+=( "-DMAIN_RELEASE" )
    # TODO(Ryan): Could do -O3 instead
    target_compiler_flags+=( "-Os" )

    target_compiler_flags+=( "-ffast-math" )

    target_compiler_flags+=( "-fipa-pta" )
    
    arm-none-eabi-gcc ${compiler_flags[*]} code/stm32f4243-main.cpp -o build/main ${linker_flags[*]}

  else
    printf "Error: Currently only support debug and release builds\n" >&2
    exit 1
  fi
else
  printf "Error: Currently only support arm arm-none-eabi-gcc on linux\n" >&2
  exit 1
fi

build_end_time=$(date +%s.%N)
build_time=$( echo "($build_end_time - $build_start_time)" | bc -l )

if [[ "$BUILD_TYPE" == "app" ]]; then 
  printf "Build Time: %.4fs\n\n" "$build_time" 
  printf "%.4f\n" "$build_time" >> misc/build-time.metric
else
  printf "Build and Test Time: %.4fs\n\n" "$build_time" 
fi
