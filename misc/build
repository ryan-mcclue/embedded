#!/bin/bash

set -oue pipefail

build_start_time=$(date +%s.%N)

if [[ "$1" != "app" && "$1" != "tests" ]]; then
  printf "Usage: ./build <app|tests>\n" >&2
  exit 1
fi

BUILD_TYPE="$1"

error() {
  printf "Error: %s\n" "$1" >&2
  exit 1
}

push_dir() {
  command pushd "$@" > /dev/null
}

pop_dir() {
  command popd "$@" > /dev/null
}

# IMPORTANT(Ryan): Want to include bytes for initialisation values for static variables in .data section that will occupy flash
readonly max_flash_size=$(( 16#4000 ))
print_flash_usage() {
  raw_size_output=$(arm-none-eabi-size $1)
  
  text_section_size=$(echo $raw_size_output | cut -d ' ' -f 7)
  data_section_size=$(echo $raw_size_output | cut -d ' ' -f 8)
  
  flash_size=$(( $text_section_size + $data_section_size))
  # NOTE(Ryan): Rearrange multiplication due to implicit truncation
  flash_usage=$(( 100 * $flash_size / $max_flash_size )) 

  printf "Flash usage: %d / %d (%d\%)\n" $flash_size $max_flash_size $flash_usage
}

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  build_os="linux"
else
  error "Currently only support linux as build machine"
fi

# NOTE(Ryan): This file is ignored by source control to allow tweaking of build params without affecting history
source "private/build-params"
param_compiler=${param_compiler:-"arm-none-eabi-gcc"}
param_mode=${param_mode:-"debug"}
param_arch=${param_arch:-"arm"}
param_verbose=${param_verbose:-"0"}
param_mcu=${param_verbose:-"stm32f429z"}

mkdir -p build run

target_compiler_flags=()
target_linker_flags=()
test_compiler_flags=()
test_linker_flags=()
# TODO(Ryan): Simulator
# simulator_compiler_flags=()
# simulator_linker_flags=()

if [[ "$param_arch" == "arm" && "$param_compiler" == "arm-none-eabi-gcc" && "$param_mcu" == "stm32f429z" && "$build_os" == "linux" ]]; then

  # IMPORTANT(Ryan): Unfortunately new errors aren't added to -Wall and -Wextra for backwards compatibility

  # NOTE(Ryan): Enable various warnings largely related to implicit signed, alignment, casting, promotion issues
  target_compiler_flags+=( "-Wall" "-Wextra" "-Wshadow" "-Wconversion" "-Wdouble-promotion" "-Wformat=2" "-pedantic" )
  target_compiler_flags+=( "-Wundef" "-Wshadow" "-Wpadded" "-fno-common" "-march=native" )
  target_compiler_flags+=( "-Wfloat-equal" "-Wlogical-op" "-Wredundant-decls" "-Wstrict-overflow=2" "-Warray-bounds=2" )
  target_compiler_flags+=( "-Wwrite-strings" "-Wpointer-arith" "-Wformat-truncation" "-Wmissing-include-dirs" )
  target_compiler_flags+=( "-Wcast-align" "-Wswitch-enum" "-Wsign-conversion" "-Wdisabled-optimization" )
  target_compiler_flags+=( "-Winline" "-Wmissing-declarations" "-Wdouble-promotion" "-Wshadow" "-Wtrampolines" )
  target_compiler_flags+=( "-Wvector-operation-performance" "-Wnull-dereference" "-Winvalid-pch" )
  target_compiler_flags+=( "-Wduplicated-cond" "-Wshift-overflow=2" "-Wcast-align=strict" )
  target_compiler_flags+=( "-Wstrict-null-sentinel" "-Wuseless-cast" "-Wzero-as-null-pointer-constant" )

  # NOTE(Ryan): Display the specific warning flag so we can ignore it if needed
  target_compiler_flags+=( "-fdiagnostics-show-option")

  # NOTE(Ryan): Ignored warnings
  target_compiler_flags+=( "-Wno-unknown-pragmas" "-Wno-missing-field-initializers" "-Wno-cast-align" "-Wno-useless-cast" "-Wno-comment" "-Wno-missing-declarations" )

  target_compiler_flags+=( "-ffunction-sections" "-fdata-sections" )

  target_compiler_flags+=( "-I code" "-isystem external" )

  target_linker_flags+=( "-Wl,--gc-sections" "-lc" "-lm" )

  test_compiler_flags=$target_compiler_flags
  test_linker_flags=$target_linker_flags
  test_linker_flags+=$( "-lcmocka" )

  # TODO(Ryan): Simulator
  # simulator_compiler_flags=$target_compiler_flags
  # simulator_compiler_flags+=$( "-mfloat-abi=soft" "--specs=rdimon.specs" )
  # simulator_linker_flags+=$( "-lrdimon" )

  target_compiler_flags+=$( "-mcpu=cortex-m4" "-mthumb" "-I$HOME/prog/cross/arm/include" "-L$HOME/prog/cross/arm/lib" )
  target_compiler_flags+=$( "-mfloat-abi=hard" "-mfpu=fpv4-sp-d16" "--specs=nano.specs" )
  target_linker_flags+=$( "-lnosys" "-Wl,-Map=${param_mcu}-${param_mode}.map,--cref" )

  target_compiler_flags+=$( "" )
# bsp_flags="
#   -DUSE_HAL_DRIVER
#   -DSTM32F429xx
#   -IBSP/tra/Core/Inc
#   -IBSP/tra/Drivers/STM32F4xx_HAL_Driver/Inc
#   -IBSP/tra/Drivers/STM32F4xx_HAL_Driver/Src
#   -IBSP/tra/Drivers/STM32F4xx_HAL_Driver/Inc/Legacy
#   -IBSP/tra/Drivers/CMSIS/Device/ST/STM32F4xx/Include
#   -IBSP/tra/Drivers/CMSIS/Include
#   -TBSP/tra/STM32F429ZITx_FLASH.ld
#   BSP/tra/startup_stm32f429xx.s
#   BSP/tra/Core/Src/system_stm32f4xx.c
# "

  if [[ "$param_mode" == "debug" ]]; then
    target_compiler_flags+=( "-DMAIN_DEBUG" "-g3" "-gdwarf-2" "-O0" )
    test_compiler_flags+=( "-DMAIN_DEBUG" "-g3" "-gdwarf-2" "-O0" )
  elif [[ "$param_mode" == "release" ]]; then
    target_compiler_flags+=( "-DMAIN_RELEASE" "-Os" "-ffast-math" "-fipa-pta" )
    test_compiler_flags+=( "-DMAIN_RELEASE" "-Os" "-ffast-math" "-fipa-pta" )
  else
    error "Currently only support debug and release builds"
  fi

  # TODO(Ryan): Tests
  # if [[ "$BUILD_TYPE" == "tests" ]]; then
      # TODO(Ryan): run natively
      # gcc -DMAIN_TEST --coverage -lcmocka ${compiler_flags[*]} \
      #   code/linux-main.cpp -o build/linux-main-test ${linker_flags[*]}
      # # NOTE(Ryan): gcov complains if overriding existing .gcda files
      # find -name '*.gcda' -exec rm -f {} +
      # push_dir run
      # ../build/linux-main-test
      # pop_dir
      # gcov -b -o . code/linux-main.cpp >/dev/null
      # gcovr -e ".*\.h"
    # find . -name '*.gcov' -and -not -name 'linux-main.cpp.gcov' -exec rm {} +
  # fi

  arm-none-eabi-gcc ${target_compiler_flags[*]} \
    code/${param_mcu}-main.c -o build/${param_mcu}-target-${param_mode}.elf \
    ${target_linker_flags[*]}

  arm-none-eabi-objcopy -O binary build/${param_mcu}-target-${param_mode}.elf build/${param_mcu}-target-${param_mode}.bin
  arm-none-eabi-objcopy -O ihex build/${param_mcu}-target-${param_mode}.elf build/${param_mcu}-target-${param_mode}.hex

  # TODO(Ryan): Simulator
  # arm-none-eabi-gcc ${compiler_flags[*]} code/linux-main.cpp -o build/stm32f2323-simulator-debug.elf ${linker_flags[*]}

else
  error "Currently only support arm arm-none-eabi-gcc stm32f429z on linux"
fi

print_flash_usage

build_end_time=$(date +%s.%N)
build_time=$( echo "($build_end_time - $build_start_time)" | bc -l )

if [[ "$BUILD_TYPE" == "app" ]]; then 
  printf "Build Time: %.4fs\n\n" "$build_time" 
  printf "%.4f\n" "$build_time" >> misc/build-time.metric
else
  printf "Build and Test Time: %.4fs\n\n" "$build_time" 
fi
